;; solarized-company-faces.el        -*- coding: utf-8; lexical-binding: t -*-

;;; Some hacked-together colors to get company-mode's UI to match Solarized.

;; This code is heavily derived from the source of the Solarized theme Emacs,
;; from https://github.com/sellout/emacs-color-theme-solarized

(require 'solarized-definitions)

(defun basis/solarized-color (name)
  (let ((index (if window-system
                   (if solarized-degrade
                       3
                     (if solarized-broken-srgb 2 1))
                 (case (display-color-cells)
                   (16 4)
                   (8  5)
                   (otherwise 3)))))
    (nth index (assoc name solarized-colors))))

(defun basis/set-solarized-company-faces (mode)
  (let ((base03      (basis/solarized-color 'base03))
        (base02      (basis/solarized-color 'base02))
        (base01      (basis/solarized-color 'base01))
        (base00      (basis/solarized-color 'base00))
        (base0       (basis/solarized-color 'base0))
        (base1       (basis/solarized-color 'base1))
        (base2       (basis/solarized-color 'base2))
        (base3       (basis/solarized-color 'base3))
        (yellow      (basis/solarized-color 'yellow))
        (orange      (basis/solarized-color 'orange))
        (red         (basis/solarized-color 'red))
        (magenta     (basis/solarized-color 'magenta))
        (violet      (basis/solarized-color 'violet))
        (blue        (basis/solarized-color 'blue))
        (cyan        (basis/solarized-color 'cyan))
        (green       (basis/solarized-color 'green))
        (bold        (if solarized-bold 'bold 'normal))
        (bright-bold (if solarized-bold 'normal 'bold))
        (underline   (if solarized-underline t nil))
        (opt-under   nil)
        (italic      (if solarized-italic 'italic 'normal)))
    (when (eq 'light mode)
      (rotatef base03 base3)
      (rotatef base02 base2)
      (rotatef base01 base1)
      (rotatef base00 base0))
    (let ((back base03))
      (cond ((< (display-color-cells) 16)
             (setf back nil))
            ((eq 'high solarized-contrast)
             (let ((orig-base3 base3))
               (rotatef base01 base00 base0 base1 base2 base3)
               (setf base3 orig-base3)))
            ((eq 'low solarized-contrast)
             (setf back      base02
                   opt-under t)))
      ;; NOTE: We try to turn an 8-color term into a 10-color term by not
      ;;       using default background and foreground colors, expecting the
      ;;       user to have the right colors set for them.
      (let ((bg-back   `(:background ,back))
            (bg-base03 `(:background ,base03))
            (bg-base02 `(:background ,base02))
            (bg-base01 `(:background ,base01))
            (bg-base00 `(:background ,base00))
            (bg-base0 `(:background ,base0))
            (bg-base1 `(:background ,base1))
            (bg-base2 `(:background ,base2))
            (bg-base3 `(:background ,base3))
            (bg-green `(:background ,green))
            (bg-yellow `(:background ,yellow))
            (bg-orange `(:background ,orange))
            (bg-red `(:background ,red))
            (bg-magenta `(:background ,magenta))
            (bg-violet `(:background ,violet))
            (bg-blue `(:background ,blue))
            (bg-cyan `(:background ,cyan))
            (fg-base03 `(:foreground ,base03))
            (fg-base02 `(:foreground ,base02))
            (fg-base01 `(:foreground ,base01))
            (fg-base00 `(:foreground ,base00))
            (fg-base0 `(:foreground ,(when (<= 16 (display-color-cells))
                                       base0)))
            (fg-base1 `(:foreground ,(when (<= 16 (display-color-cells))
                                       base1)))
            (fg-base2 `(:foreground ,base2))
            (fg-base3 `(:foreground ,base3))
            (fg-green `(:foreground ,green))
            (fg-yellow `(:foreground ,yellow))
            (fg-orange `(:foreground ,orange))
            (fg-red `(:foreground ,red))
            (fg-magenta `(:foreground ,magenta))
            (fg-violet `(:foreground ,violet))
            (fg-blue `(:foreground ,blue))
            (fg-cyan `(:foreground ,cyan)))
        (custom-theme-set-faces
         'solarized-dark
         `(company-tooltip ((t (,@fg-base00 ,@bg-base02))))
         `(company-tooltip-selection ((t (,@fg-yellow ,@bg-base02))))
         `(company-tooltip-mouse ((t (,@fg-yellow ,@bg-base02))))
         `(company-tooltip-common ((t (,@fg-yellow ,@bg-base02))))
         `(company-tooltip-common-selection ((t (,@fg-yellow ,@bg-base02))))
         `(company-scrollbar-fg ((t (,@bg-green))))
         `(company-scrollbar-bg ((t (,@bg-base02))))
         `(company-preview ((t (,@bg-green))))
         `(company-preview-common ((t (,@bg-base02)))))))))

(provide 'solarized-company-faces)
