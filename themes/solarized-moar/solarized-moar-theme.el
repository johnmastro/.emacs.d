;; solarized-moar-theme.el  -*- lexical-binding: t -*-

(require 'solarized-definitions)        ; For `create-face-spec'

(deftheme solarized-moar "More faces for solarized.")

(defun solarized-moar-color-index ()
  ;; TODO: This logic for the default index is probably not completely accurate
  (or (and (display-graphic-p)
           (or (and solarized-degrade 3)
               (and solarized-broken-srgb 2)
               1))
      (let ((colors-defined (length (defined-colors))))
        (or (and (= solarized-termcolors 16) 4)
            (and (>= colors-defined 256) 3)
            (and (>= colors-defined 16) 4)
            5))))

(defun solarized-moar-get-color (name &optional index)
  (or (nth (or index (solarized-moar-color-index))
           (assoc name solarized-colors))
      (error "No color `%s' found" name)))

(defun solarized-moar-get-colors (&optional index)
  (let ((index (or index (solarized-moar-color-index))))
    (mapcar (lambda (elt)
              (cons (car elt) (nth index elt)))
            solarized-colors)))

(defun solarized-moar-color-definitions ()
  (let ((bold        (if solarized-bold 'bold 'normal))
        (bright-bold (if solarized-bold 'normal 'bold))
        (underline   (if solarized-underline t nil))
        (opt-under   nil)
        (italic      (if solarized-italic 'italic 'normal)))
    (let ((bg-back   '(:background back))
          (bg-base03 '(:background base03))
          (bg-base02 '(:background base02))
          (bg-base01 '(:background base01))
          (bg-base00 '(:background base00))
          (bg-base0 '(:background base0))
          (bg-base1 '(:background base1))
          (bg-base2 '(:background base2))
          (bg-base3 '(:background base3))
          (bg-green '(:background green))
          (bg-yellow '(:background yellow))
          (bg-orange '(:background orange))
          (bg-red '(:background red))
          (bg-magenta '(:background magenta))
          (bg-violet '(:background violet))
          (bg-blue '(:background blue))
          (bg-cyan '(:background cyan))

          (fg-base03 '(:foreground base03))
          (fg-base02 '(:foreground base02))
          (fg-base01 '(:foreground base01))
          (fg-base00 '(:foreground base00))
          (fg-base0 '(:foreground base0))
          (fg-base1 '(:foreground base1))
          (fg-base2 '(:foreground base2))
          (fg-base3 '(:foreground base3))
          (fg-green '(:foreground green))
          (fg-yellow '(:foreground yellow))
          (fg-orange '(:foreground orange))
          (fg-red '(:foreground red))
          (fg-magenta '(:foreground magenta))
          (fg-violet '(:foreground violet))
          (fg-blue '(:foreground blue))
          (fg-cyan '(:foreground cyan))

          (fmt-none `(:weight normal :slant normal  :underline nil        :inverse-video nil))
          (fmt-bold `(:weight ,bold  :slant normal  :underline nil        :inverse-video nil))
          (fmt-bldi `(:weight ,bold                 :underline nil        :inverse-video nil))
          (fmt-undr `(:weight normal :slant normal  :underline ,underline :inverse-video nil))
          (fmt-undb `(:weight ,bold  :slant normal  :underline ,underline :inverse-video nil))
          (fmt-undi `(:weight normal                :underline ,underline :inverse-video nil))
          (fmt-uopt `(:weight normal :slant normal  :underline ,opt-under :inverse-video nil))
          ;; FIXME: donâ€™t hardcode the SRGB color names
          (fmt-curl-red    `(:weight normal :slant normal :underline (:color "#dc322f" :style wave) :inverse-video nil))
          (fmt-curl-yellow `(:weight normal :slant normal :underline (:color "#b58900" :style wave) :inverse-video nil))
          (fmt-ital `(:weight normal :slant ,italic :underline nil        :inverse-video nil))
          ;; FIXME: not quite the same
          (fmt-stnd `(:weight normal :slant normal  :underline nil        :inverse-video t))
          (fmt-revr `(:weight normal :slant normal  :underline nil        :inverse-video t))
          (fmt-revb `(:weight ,bold  :slant normal  :underline nil        :inverse-video t))
          (fmt-revbb `(:weight ,bright-bold :slant normal :underline nil  :inverse-video t))
          (fmt-revbbu `(:weight ,bright-bold :slant normal :underline ,underline :inverse-video t)))
      (mapcar (lambda (face) (apply 'create-face-spec face))
              `(
                ;; guide-key
                (guide-key/key-face (,@fg-blue))
                ;; helm
                (helm-source-header (,@bg-blue ,@fg-base03 ,@fmt-none))
                (helm-visible-mark (,@bg-green ,@fg-base3))
                (helm-selection (:inherit highlight))
                (helm-selection-line (,@fg-base02 ,@bg-yellow))
                (helm-candidate-number (:inherit mode-line))
                (helm-match (:inherit match))
                ;; helm-M-x
                (helm-M-x-key (,@fg-yellow ,@fmt-undr))
                ;; helm-files
                (helm-ff-prefix (,@bg-yellow ,@fg-base03))
                (helm-ff-file (,@fg-base0))
                (helm-ff-executable (,@fg-green))
                (helm-ff-directory (,@fg-blue))
                (helm-ff-dotted-directory (,@fg-blue))
                (helm-ff-symlink (,@fg-cyan))
                (helm-ff-invalid-symlink (,@bg-base03 ,@fg-orange))
                (helm-history-deleted (,@fg-magenta))
                (helm-history-remote (,@fg-violet))
                ;; helm-locate
                (helm-locate-finish (:inherit mode-line))
                ;; helm-buffers
                (helm-buffer-not-saved (,@fg-orange))
                (helm-buffer-saved-out (,@bg-base03 ,@fg-red))
                (helm-buffer-file (:inherit helm-ff-file))
                (helm-buffer-directory (:inherit helm-ff-directory))
                (helm-buffer-size (:inherit font-lock-comment-face))
                (helm-buffer-process (,@fg-orange))
                ;; helm-bookmark
                (helm-bookmark-directory (:inherit helm-ff-directory))
                (helm-bookmark-file (:inherit helm-ff-file))
                (helm-bookmark-gnus (,@fg-cyan))
                (helm-bookmark-info (,@fg-green))
                (helm-bookmark-man (,@fg-violet))
                (helm-bookmark-w3m (,@fg-yellow))
                (helm-bookmark-su (,@fg-orange))
                ;; helm-grep
                (helm-grep-match (:inherit match))
                (helm-grep-file (:inherit compilation-info))
                (helm-grep-lineno (:inherit compilation-info))
                (helm-grep-running (,@fg-red))
                (helm-grep-finish (:inherit mode-line))
                (helm-moccur-buffer (,@fg-cyan ,@fmt-undr))
                ;; helm-swoop
                (helm-swoop-target-line-face (:inherit match))
                (helm-swoop-target-line-block-face (:inherit match))
                (helm-swoop-target-word-face (:inherit isearch))
                (helm-swoop-line-number-face (:inherit shadow))
                ;; helm-time-zone
                (helm-time-zone-current (,@fg-green))
                (helm-time-zone-home (,@fg-red))
                ;; helm-apt
                (helm-apt-installed (,@fg-green))
                (helm-apt-deinstalled (,@fg-base01))
                ;; company-mode
                (company-tooltip (,@fg-base00 ,@bg-base02))
                (company-tooltip-selection (,@fg-base1 ,@bg-base02))
                (company-tooltip-mouse (,@fg-base1 ,@bg-base02))
                (company-tooltip-common (,@fg-base1 ,@bg-base02))
                (company-tooltip-common-selection (,@fg-base1 ,@bg-base02))
                (company-tooltip-annotation (,@fg-yellow ,@bg-base02))
                (company-scrollbar-fg (,@bg-base0))
                (company-scrollbar-bg (,@bg-base02))
                (company-preview (,@bg-green))
                (company-preview-common (,@bg-base02 :underline t))
                (company-template-field (,@fg-base03 ,@bg-yellow))
                ;; magit (for the 'next' branch)
                (magit-dimmed (:inherit shadow))
                (magit-hash (,@fg-yellow))
                (magit-tag (,@fg-yellow))
                (magit-filename (:inherit magit-hash))
                (magit-branch-remote (,@fg-green))
                (magit-branch-local (,@fg-blue))
                (magit-branch-current (:inherit magit-branch-local))
                (magit-head (:inherit magit-branch-local))
                (magit-refname (:inherit magit-hash))
                (magit-refname-stash (:inherit magit-hash))
                (magit-refname-wip (:inherit magit-hash))
                (magit-signature-good (,@fg-green))
                (magit-signature-bad (,@fg-red))
                (magit-signature-untrusted (,@fg-cyan))
                (magit-cherry-unmatched (,@fg-cyan))
                (magit-cherry-equivalent (,@fg-magenta))
                ;; magit-section
                (magit-section-heading (:inherit default ,@fmt-revb))
                (magit-section-highlight (:inherit highlight))
                ;; magit-diff
                (magit-diff-file-heading (:inherit default ,@fmt-bold))
                (magit-diff-file-heading-highlight (:inherit (highlight magit-diff-file-heading) ,@fmt-bold))
                (magit-diff-file-heading-selection (:inherit magit-diff-file-heading-highlight ,@fg-orange))
                (magit-diff-hunk-heading (:inherit diff-hunk-header ,@fmt-bold))
                (magit-diff-hunk-heading-highlight (:inherit (highlight magit-diff-hunk-heading) ,@fmt-bold))
                (magit-diff-hunk-heading-selection (:inherit magit-diff-hunk-heading-highlight ,@fg-orange))
                (magit-diff-lines-heading (,@bg-orange ,@fg-base3))
                (magit-diff-context (:inherit default))
                (magit-diff-context-highlight (:inherit highlight))
                (magit-diff-added (,@fg-green))
                (magit-diff-added-highlight (:inherit (highlight magit-diff-added)))
                (magit-diff-removed (,@fg-red))
                (magit-diff-removed-highlight (:inherit (highlight magit-diff-removed)))
                (magit-diffstat-added (,@fg-green))
                (magit-diffstat-removed (,@fg-red))
                ;; magit-log
                (magit-log-author (,@fg-orange))
                (magit-log-date (:inherit magit-diff-hunk-heading))
                (magit-log-graph (:inherit default))
                (magit-reflog-commit (,@fg-yellow))
                (magit-reflog-amment (,@fg-orange))
                (magit-reflog-checkout (,@fg-cyan))
                (magit-reflog-reset (,@fg-red))
                (magit-reflog-rebase (,@fg-green))
                (magit-reflog-cherry-pick (,@fg-violet))
                (magit-reflog-remote (,@fg-blue))
                (magit-reflog-other (,@fg-magenta))
                ;; magit-blame
                (magit-blame-heading (,@bg-base3 ,@fg-base02))
                ;; magit-process
                (magit-process-ok (,@fg-green))
                (magit-process-ng (,@fg-red))
                ;; magit-sequence
                (magit-sequence-stop (,@fg-green))
                (magit-sequence-part (,@fg-yellow))
                (magit-sequence-head (,@fg-blue))
                (magit-sequence-drop (,@fg-red))
                ;; magit-bisect
                (magit-bisect-good (,@fg-green))
                (magit-bisect-skip (,@fg-yellow))
                (magit-bisect-bad (,@fg-red))
                ;; git-rebase
                (git-rebase-hash (:inherit magit-hash))
                ;; transient
                (transient-nonstandard-key (:inherit highlight))
                (transient-mismatched-key (:inherit highlight))
                ;; macrostep
                (macrostep-gensym-1 (,@fg-violet :box (,@fg-violet)))
                (macrostep-gensym-2 (,@fg-green :box (,@fg-green)))
                (macrostep-gensym-3 (,@fg-yellow :box (,@fg-yellow)))
                (macrostep-gensym-4 (,@fg-red :box (,@fg-red)))
                (macrostep-gensym-5 (,@fg-magenta :box (,@fg-magenta)))
                (macrostep-expansion-highlight-face (:inherit highlight))
                (macrostep-macro-face (:inherit font-lock-keyword-face ,@fmt-undr))
                ;; which-func
                (which-func (,@fg-base1))
                ;; dired+
                (diredp-autofile-name (:inherit default))
                (diredp-compressed-file-name (:inherit default))
                (diredp-compressed-file-suffix (:inherit default))
                (diredp-date-time (:inherit default))
                (diredp-deletion (,@fg-orange))
                (diredp-deletion-file-name (,@fg-orange))
                (diredp-dir-heading (,@fg-base03 ,@bg-base0))
                (diredp-dir-name (,@fg-blue))
                (diredp-dir-priv (:inherit default))
                (diredp-exec-priv (:inherit default))
                (diredp-executable-tag (,@fg-green))
                (diredp-file-name (:inherit default))
                (diredp-file-suffix (:inherit default))
                (diredp-flag-mark (,@fg-yellow))
                (diredp-flag-mark-line (,@fg-yellow))
                (diredp-ignored-file-name (:inherit default))
                (diredp-link-priv (:inherit default))
                (diredp-mode-line-marked (:inherit mode-line ,@fg-orange))
                (diredp-mode-line-flagged (:inherit mode-line ,@fg-orange))
                (diredp-no-priv (:inherit default))
                (diredp-number (:inherit default))
                (diredp-other-priv (:inherit default))
                (diredp-rare-priv (:inherit default))
                (diredp-read-priv (:inherit default))
                (diredp-symlink (,@fg-cyan))
                (diredp-tagged-autofile-name (:inherit default))
                (diredp-write-priv (:inherit default))
                ;; avy
                (avy-lead-face-0 (:inherit match))
                (avy-lead-face-1 (:inherit match))
                (avy-lead-face (:inherit isearch))
                ;; ivy
                (ivy-confirm-face (,@fg-green))
                (ivy-current-match (,@fg-blue))
                (ivy-match-required-face (,@fg-red))
                (ivy-minibuffer-match-face-1 (:inherit highlight))
                (ivy-minibuffer-match-face-2 (:inherit highlight))
                (ivy-minibuffer-match-face-3 (:inherit highlight))
                (ivy-minibuffer-match-face-4 (:inherit highlight))
                (ivy-remote (,@fg-violet))
                ;; whitespace
                (whitespace-line (:foreground nil :underline (:color "#586e75")))
                (whitespace-tab (:foreground nil :underline (:color "#586e75")))
                ;; el-search
                (el-search-match (:inherit isearch))
                (el-search-other-match (:inherit match))
                ;; org
                (org-todo (,@fg-red ,@bg-back :inverse-video nil))
                (org-ellipsis (,@fg-green))
                ;; smerge
                ;; smerge-mine = red
                ;; smerge-other = green
                ;; smerge-base = yellow
                ;; smerge-markers = shadow?
                (smerge-refined-added (,@bg-back))
                (smerge-refined-changed (,@bg-back)) ; by default, no styling
                (smerge-refined-removed (,@bg-back))
                )))))

(defun solarized-moar-set-faces ()
  (apply #'custom-theme-set-faces
         'solarized-moar
         (solarized-moar-color-definitions))
  (with-eval-after-load 'ansi-color
    (let* ((base02  (solarized-moar-get-color 'base02))
           (red     (solarized-moar-get-color 'red))
           (green   (solarized-moar-get-color 'green))
           (yellow  (solarized-moar-get-color 'yellow))
           (blue    (solarized-moar-get-color 'blue))
           (magenta (solarized-moar-get-color 'magenta))
           (cyan    (solarized-moar-get-color 'cyan))
           (base00  (solarized-moar-get-color 'base00))
           (colors  (vector base02 red green yellow blue magenta cyan base00)))
      (ansi-color-map-update 'ansi-color-names-vector colors))))

(solarized-moar-set-faces)

(provide-theme 'solarized-moar)
